{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wilkin/Projects/Coding_Projects/OurRecipes/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wilkin/Projects/Coding_Projects/OurRecipes/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/wilkin/Projects/Coding_Projects/OurRecipes/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport MockData from '../tests/MockData';\nimport RecipeClient from '../RecipeAPI/RecipeClient';\n\nfunction createIngredient(ingredient) {\n  var name = ingredient.name,\n      unit = ingredient.unit,\n      quantity = ingredient.quantity,\n      plural = ingredient.plural;\n  var hasUnit = unit !== undefined && unit !== null;\n  var unitConvertable = hasUnit && unit.scaler !== undefined && unit.scaler !== null;\n  return {\n    name: name,\n    unit: unit,\n    quantity: quantity,\n    hasUnit: hasUnit,\n    unitConvertable: unitConvertable,\n    plural: plural\n  };\n}\n\nfunction getAvailableUnits() {\n  var availableUnits = MockData.availableUnits;\n  return availableUnits;\n}\n\nfunction formatRecipeData(recipe) {\n  var formattedRecipe = recipe;\n  var ingredients = recipe.ingredients.map(function (ingredient) {\n    return createIngredient(ingredient);\n  });\n  formattedRecipe.ingredients = ingredients;\n  return formattedRecipe;\n}\n\nexport default function useRecipeData(recipeId) {\n  var recipe = MockData.recipe;\n\n  var _formatRecipeData = formatRecipeData(recipe),\n      id = _formatRecipeData.id,\n      title = _formatRecipeData.title,\n      subTitle = _formatRecipeData.subTitle,\n      instructions = _formatRecipeData.instructions,\n      ingredients = _formatRecipeData.ingredients,\n      ovenHeat = _formatRecipeData.ovenHeat,\n      servings = _formatRecipeData.servings,\n      appliances = _formatRecipeData.appliances,\n      image = _formatRecipeData.image;\n\n  var _React$useState = React.useState(recipe.scaler ? recipe.scaler : 1),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      scaler = _React$useState2[0],\n      setScaler = _React$useState2[1];\n\n  var _React$useState3 = React.useState(recipe.isCelsius),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isCelsius = _React$useState4[0],\n      setIsCelsius = _React$useState4[1];\n\n  var availableUnits = getAvailableUnits();\n  React.useEffect(function () {\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var client, fetchRecipe;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              client = new RecipeClient();\n              fetchRecipe = client.getRecipe({\n                recipeId: recipeId\n              });\n              _context.t0 = console;\n              _context.next = 5;\n              return fetchRecipe;\n\n            case 5:\n              _context.t1 = _context.sent;\n\n              _context.t0.log.call(_context.t0, _context.t1);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }, []);\n  return {\n    scaler: scaler,\n    setScaler: setScaler,\n    isCelsius: isCelsius,\n    setIsCelsius: setIsCelsius,\n    id: id,\n    title: title,\n    subTitle: subTitle,\n    instructions: instructions,\n    availableUnits: availableUnits,\n    ingredients: ingredients,\n    ovenHeat: ovenHeat,\n    servings: servings,\n    appliances: appliances,\n    image: image\n  };\n}","map":{"version":3,"sources":["/Users/wilkin/Projects/Coding_Projects/OurRecipes/src/Hooks/useRecipeData.js"],"names":["React","MockData","RecipeClient","createIngredient","ingredient","name","unit","quantity","plural","hasUnit","undefined","unitConvertable","scaler","getAvailableUnits","availableUnits","formatRecipeData","recipe","formattedRecipe","ingredients","map","useRecipeData","recipeId","id","title","subTitle","instructions","ovenHeat","servings","appliances","image","useState","setScaler","isCelsius","setIsCelsius","useEffect","client","fetchRecipe","getRecipe","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MockData from '../tests/MockData';\nimport RecipeClient from '../RecipeAPI/RecipeClient';\n\nfunction createIngredient(ingredient) {\n  const {\n    name, unit, quantity, plural,\n  } = ingredient;\n  const hasUnit = unit !== undefined && unit !== null;\n  const unitConvertable = hasUnit && unit.scaler !== undefined && unit.scaler !== null;\n  return {\n    name, unit, quantity, hasUnit, unitConvertable, plural,\n  };\n}\n\nfunction getAvailableUnits() {\n  const { availableUnits } = MockData;\n  return availableUnits;\n}\n\nfunction formatRecipeData(recipe) {\n  const formattedRecipe = recipe;\n\n  const ingredients = recipe.ingredients.map(ingredient => createIngredient(ingredient));\n  formattedRecipe.ingredients = ingredients;\n  return formattedRecipe;\n}\n\nexport default function useRecipeData(recipeId) {\n  const { recipe } = MockData;\n  const {\n    id,\n    title,\n    subTitle,\n    instructions,\n    ingredients,\n    ovenHeat,\n    servings,\n    appliances,\n    image,\n  } = formatRecipeData(recipe);\n  const [scaler, setScaler] = React.useState(recipe.scaler ? recipe.scaler : 1);\n  const [isCelsius, setIsCelsius] = React.useState(recipe.isCelsius);\n  const availableUnits = getAvailableUnits();\n\n  React.useEffect(() => {\n    (async () => {\n      const client = new RecipeClient();\n      const fetchRecipe = client.getRecipe({ recipeId });\n      console.log(await fetchRecipe);\n    })();\n  }, []);\n\n\n  return {\n    scaler,\n    setScaler,\n    isCelsius,\n    setIsCelsius,\n    id,\n    title,\n    subTitle,\n    instructions,\n    availableUnits,\n    ingredients,\n    ovenHeat,\n    servings,\n    appliances,\n    image,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}