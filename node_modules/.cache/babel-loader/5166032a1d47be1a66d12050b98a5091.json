{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wilkin/Projects/Coding_Projects/OurRecipes/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wilkin/Projects/Coding_Projects/OurRecipes/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wilkin/Projects/Coding_Projects/OurRecipes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wilkin/Projects/Coding_Projects/OurRecipes/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar API_URL = 'https://llfrecipes-6c4b.restdb.io/rest/';\nvar API_KEY = '5aa5d596f0a7555103cea3c8';\n\nvar RecipeClient =\n/*#__PURE__*/\nfunction () {\n  function RecipeClient() {\n    _classCallCheck(this, RecipeClient);\n\n    this.apiUrl = API_URL;\n    this.apikey = API_KEY;\n  } // Get all the recipes in the database -> to display on browse\n\n\n  _createClass(RecipeClient, [{\n    key: \"getAllRecipes\",\n    value: function () {\n      var _getAllRecipes = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var url, response, json;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = \"\".concat(this.apiUrl, \"recipe?q={}&h={\\\"$orderby\\\": {\\\"RecipeTitle\\\": 1}}\");\n                _context.next = 3;\n                return fetch(url, {\n                  method: 'get',\n                  headers: {\n                    'x-apikey': this.apikey\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n\n                if (!(response.status >= 400)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw Error(response.statusText);\n\n              case 6:\n                _context.next = 8;\n                return response.json();\n\n              case 8:\n                json = _context.sent;\n                return _context.abrupt(\"return\", json);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getAllRecipes() {\n        return _getAllRecipes.apply(this, arguments);\n      }\n\n      return getAllRecipes;\n    }() // Get a recipe by a given id TODO: get by title\n\n  }, {\n    key: \"getRecipe\",\n    value: function () {\n      var _getRecipe = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(_ref) {\n        var recipeId, url, response, json;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                recipeId = _ref.recipeId;\n                url = \"\".concat(this.apiUrl, \"recipe?q={\\\"RecipeId\\\":\").concat(recipeId, \"}\");\n                _context2.next = 4;\n                return fetch(url, {\n                  method: 'get',\n                  headers: {\n                    'x-apikey': this.apikey\n                  }\n                });\n\n              case 4:\n                response = _context2.sent;\n\n                if (!(response.status >= 400)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw Error(response.statusText);\n\n              case 7:\n                _context2.next = 9;\n                return response.json();\n\n              case 9:\n                json = _context2.sent;\n                return _context2.abrupt(\"return\", json);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getRecipe(_x) {\n        return _getRecipe.apply(this, arguments);\n      }\n\n      return getRecipe;\n    }() // Get all ingredients by recipeId\n\n  }, {\n    key: \"getIngredients\",\n    value: function () {\n      var _getIngredients = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(_ref2) {\n        var recipeId, url, response, json;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                recipeId = _ref2.recipeId;\n                url = \"\".concat(this.apiUrl, \"ingredient?q={\\\"RecipeId\\\":\").concat(recipeId, \"}\");\n                _context3.next = 4;\n                return fetch(url, {\n                  method: 'get',\n                  headers: {\n                    'x-apikey': this.apikey\n                  }\n                });\n\n              case 4:\n                response = _context3.sent;\n\n                if (!(response.status >= 400)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                throw Error(response.statusText);\n\n              case 7:\n                _context3.next = 9;\n                return response.json();\n\n              case 9:\n                json = _context3.sent;\n                return _context3.abrupt(\"return\", json);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getIngredients(_x2) {\n        return _getIngredients.apply(this, arguments);\n      }\n\n      return getIngredients;\n    }()\n  }]);\n\n  return RecipeClient;\n}();\n\nexport default RecipeClient;","map":{"version":3,"sources":["/Users/wilkin/Projects/Coding_Projects/OurRecipes/src/RecipeAPI/RecipeClient.js"],"names":["API_URL","API_KEY","RecipeClient","apiUrl","apikey","url","fetch","method","headers","response","status","Error","statusText","json","recipeId"],"mappings":";;;;AAAA,IAAMA,OAAO,GAAG,yCAAhB;AACA,IAAMC,OAAO,GAAG,0BAAhB;;IAEMC,Y;;;AACJ,0BAAc;AAAA;;AACZ,SAAKC,MAAL,GAAcH,OAAd;AACA,SAAKI,MAAL,GAAcH,OAAd;AACD,G,CAED;;;;;;;;;;;;;;AAEQI,gBAAAA,G,aAAS,KAAKF,M;;uBACGG,KAAK,CAACD,GAAD,EAAM;AAChCE,kBAAAA,MAAM,EAAE,KADwB;AAEhCC,kBAAAA,OAAO,EAAE;AACP,gCAAY,KAAKJ;AADV;AAFuB,iBAAN,C;;;AAAtBK,gBAAAA,Q;;sBAMFA,QAAQ,CAACC,MAAT,IAAmB,G;;;;;sBACfC,KAAK,CAACF,QAAQ,CAACG,UAAV,C;;;;uBAEMH,QAAQ,CAACI,IAAT,E;;;AAAbA,gBAAAA,I;iDACCA,I;;;;;;;;;;;;;;;QAGT;;;;;;;;;;;;;AACkBC,gBAAAA,Q,QAAAA,Q;AACVT,gBAAAA,G,aAAS,KAAKF,M,oCAA8BW,Q;;uBAC3BR,KAAK,CAACD,GAAD,EAAM;AAChCE,kBAAAA,MAAM,EAAE,KADwB;AAEhCC,kBAAAA,OAAO,EAAE;AACP,gCAAY,KAAKJ;AADV;AAFuB,iBAAN,C;;;AAAtBK,gBAAAA,Q;;sBAMFA,QAAQ,CAACC,MAAT,IAAmB,G;;;;;sBACfC,KAAK,CAACF,QAAQ,CAACG,UAAV,C;;;;uBAEMH,QAAQ,CAACI,IAAT,E;;;AAAbA,gBAAAA,I;kDACCA,I;;;;;;;;;;;;;;;QAGT;;;;;;;;;;;;;AACuBC,gBAAAA,Q,SAAAA,Q;AACfT,gBAAAA,G,aAAS,KAAKF,M,wCAAkCW,Q;;uBAC/BR,KAAK,CAACD,GAAD,EAAM;AAChCE,kBAAAA,MAAM,EAAE,KADwB;AAEhCC,kBAAAA,OAAO,EAAE;AACP,gCAAY,KAAKJ;AADV;AAFuB,iBAAN,C;;;AAAtBK,gBAAAA,Q;;sBAMFA,QAAQ,CAACC,MAAT,IAAmB,G;;;;;sBACfC,KAAK,CAACF,QAAQ,CAACG,UAAV,C;;;;uBAEMH,QAAQ,CAACI,IAAT,E;;;AAAbA,gBAAAA,I;kDACCA,I;;;;;;;;;;;;;;;;;;;;;AAIX,eAAeX,YAAf","sourcesContent":["const API_URL = 'https://llfrecipes-6c4b.restdb.io/rest/';\nconst API_KEY = '5aa5d596f0a7555103cea3c8';\n\nclass RecipeClient {\n  constructor() {\n    this.apiUrl = API_URL;\n    this.apikey = API_KEY;\n  }\n\n  // Get all the recipes in the database -> to display on browse\n  async getAllRecipes() {\n    const url = `${this.apiUrl}recipe?q={}&h={\"$orderby\": {\"RecipeTitle\": 1}}`;\n    const response = await fetch(url, {\n      method: 'get',\n      headers: {\n        'x-apikey': this.apikey,\n      },\n    });\n    if (response.status >= 400) {\n      throw Error(response.statusText);\n    }\n    const json = await response.json();\n    return json;\n  }\n\n  // Get a recipe by a given id TODO: get by title\n  async getRecipe({ recipeId }) {\n    const url = `${this.apiUrl}recipe?q={\"RecipeId\":${recipeId}}`;\n    const response = await fetch(url, {\n      method: 'get',\n      headers: {\n        'x-apikey': this.apikey,\n      },\n    });\n    if (response.status >= 400) {\n      throw Error(response.statusText);\n    }\n    const json = await response.json();\n    return json;\n  }\n\n  // Get all ingredients by recipeId\n  async getIngredients({ recipeId }) {\n    const url = `${this.apiUrl}ingredient?q={\"RecipeId\":${recipeId}}`;\n    const response = await fetch(url, {\n      method: 'get',\n      headers: {\n        'x-apikey': this.apikey,\n      },\n    });\n    if (response.status >= 400) {\n      throw Error(response.statusText);\n    }\n    const json = await response.json();\n    return json;\n  }\n}\n\nexport default RecipeClient;\n"]},"metadata":{},"sourceType":"module"}