{"ast":null,"code":"export function decimalToFraction(decimal, maxDenominator) {\n  for (var d = 1; d <= maxDenominator; d += 1) {\n    var currentNumerator = (decimal * d).toFixed(4);\n\n    if (currentNumerator % 1 === 0) {\n      if (d === 1) {\n        var integer = Math.floor(currentNumerator / d);\n        return \"\".concat(integer);\n      }\n\n      if (currentNumerator > d) {\n        var _integer = Math.floor(currentNumerator / d);\n\n        var remainder = currentNumerator - _integer * d;\n        return \"\".concat(_integer, \" \").concat(remainder, \"/\").concat(d);\n      }\n\n      if (currentNumerator === d) {\n        return '1';\n      }\n\n      if (d > currentNumerator) {\n        return \"\".concat(Math.round(currentNumerator), \"/\").concat(d);\n      }\n    }\n  }\n\n  return 'reached max denominator';\n}\nexport function convertTemperature(temperature, isCelsius) {\n  if (isCelsius) {\n    return Math.round(temperature * 9 / 5 + 32);\n  }\n\n  return Math.round((temperature - 32) * 5 / 9);\n}\nexport function convertUnit(quantity, newUnitScaler, origionalUnitScaler) {\n  return quantity * newUnitScaler / origionalUnitScaler;\n}","map":{"version":3,"sources":["/Users/wilkin/Projects/Coding_Projects/OurRecipes/src/utils.js"],"names":["decimalToFraction","decimal","maxDenominator","d","currentNumerator","toFixed","integer","Math","floor","remainder","round","convertTemperature","temperature","isCelsius","convertUnit","quantity","newUnitScaler","origionalUnitScaler"],"mappings":"AAAA,OAAO,SAASA,iBAAT,CAA2BC,OAA3B,EAAoCC,cAApC,EAAoD;AACzD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAID,cAArB,EAAqCC,CAAC,IAAI,CAA1C,EAA6C;AAC3C,QAAMC,gBAAgB,GAAG,CAACH,OAAO,GAAGE,CAAX,EAAcE,OAAd,CAAsB,CAAtB,CAAzB;;AACA,QAAKD,gBAAgB,GAAG,CAApB,KAA2B,CAA/B,EAAkC;AAChC,UAAID,CAAC,KAAK,CAAV,EAAa;AACX,YAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,gBAAgB,GAAGD,CAA9B,CAAhB;AACA,yBAAUG,OAAV;AACD;;AACD,UAAIF,gBAAgB,GAAGD,CAAvB,EAA0B;AACxB,YAAMG,QAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,gBAAgB,GAAGD,CAA9B,CAAhB;;AACA,YAAMM,SAAS,GAAGL,gBAAgB,GAAGE,QAAO,GAAGH,CAA/C;AACA,yBAAUG,QAAV,cAAqBG,SAArB,cAAkCN,CAAlC;AACD;;AACD,UAAIC,gBAAgB,KAAKD,CAAzB,EAA4B;AAC1B,eAAO,GAAP;AACD;;AACD,UAAIA,CAAC,GAAGC,gBAAR,EAA0B;AACxB,yBAAUG,IAAI,CAACG,KAAL,CAAWN,gBAAX,CAAV,cAA0CD,CAA1C;AACD;AACF;AACF;;AACD,SAAO,yBAAP;AACD;AAED,OAAO,SAASQ,kBAAT,CAA4BC,WAA5B,EAAyCC,SAAzC,EAAoD;AACzD,MAAIA,SAAJ,EAAe;AACb,WAAON,IAAI,CAACG,KAAL,CAAYE,WAAW,GAAG,CAAd,GAAkB,CAAnB,GAAwB,EAAnC,CAAP;AACD;;AAED,SAAOL,IAAI,CAACG,KAAL,CAAW,CAACE,WAAW,GAAG,EAAf,IAAqB,CAArB,GAAyB,CAApC,CAAP;AACD;AAED,OAAO,SAASE,WAAT,CAAqBC,QAArB,EAA+BC,aAA/B,EAA8CC,mBAA9C,EAAmE;AACxE,SAAOF,QAAQ,GAAGC,aAAX,GAA2BC,mBAAlC;AACD","sourcesContent":["export function decimalToFraction(decimal, maxDenominator) {\n  for (let d = 1; d <= maxDenominator; d += 1) {\n    const currentNumerator = (decimal * d).toFixed(4);\n    if ((currentNumerator % 1) === 0) {\n      if (d === 1) {\n        const integer = Math.floor(currentNumerator / d);\n        return `${integer}`;\n      }\n      if (currentNumerator > d) {\n        const integer = Math.floor(currentNumerator / d);\n        const remainder = currentNumerator - integer * d;\n        return `${integer} ${remainder}/${d}`;\n      }\n      if (currentNumerator === d) {\n        return '1';\n      }\n      if (d > currentNumerator) {\n        return `${Math.round(currentNumerator)}/${d}`;\n      }\n    }\n  }\n  return 'reached max denominator';\n}\n\nexport function convertTemperature(temperature, isCelsius) {\n  if (isCelsius) {\n    return Math.round((temperature * 9 / 5) + 32);\n  }\n\n  return Math.round((temperature - 32) * 5 / 9);\n}\n\nexport function convertUnit(quantity, newUnitScaler, origionalUnitScaler) {\n  return quantity * newUnitScaler / origionalUnitScaler;\n}\n"]},"metadata":{},"sourceType":"module"}